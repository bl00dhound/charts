{
	"info": {
		"_postman_id": "edcea762-0122-423b-b83b-b7df5fab8532",
		"name": "Otus architect",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01 Register user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "56c44485-3879-4013-ae3c-5d8fa328f66c",
						"exec": [
							"const body = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"id1\", body.id);",
							"",
							"pm.test(\"Check is create successful\", function () {",
							"    const jwt = pm.response.headers.get('Set-Cookie').split('=')[1].split(';')[0];",
							"    pm.collectionVariables.set('jwt1', jwt);",
							"",
							"",
							"    var body = pm.response.json();",
							"    pm.expect(body).to.have.property('firstName', pm.collectionVariables.get('firstName1'));",
							"    pm.expect(body).to.have.property('lastName', pm.collectionVariables.get('lastName1'));",
							"    pm.expect(body).to.have.property('email', pm.collectionVariables.get('email1'));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "806cd3bb-01de-4434-bf64-9d59e374747a",
						"exec": [
							"pm.collectionVariables.set(\"password1\", pm.variables.replaceIn('{{$randomPassword}}'))",
							"pm.collectionVariables.set(\"email1\", pm.variables.replaceIn('{{$randomEmail}}'))",
							"pm.collectionVariables.set(\"firstName1\", pm.variables.replaceIn('{{$randomFirstName}}_more'))",
							"pm.collectionVariables.set(\"lastName1\", pm.variables.replaceIn('{{$randomLastName}}_more'))",
							"pm.collectionVariables.set(\"phone1\", pm.variables.replaceIn('+380987867878'))"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"user-agent": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"{{firstName1}}\",\n    \"lastName\": \"{{lastName1}}\",\n    \"email\": \"{{email1}}\",\n    \"phone\": \"{{phone1}}\",\n    \"password\": \"{{password1}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/register",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register"
					]
				},
				"description": "User1 register"
			},
			"response": []
		},
		{
			"name": "02 Can't get user1 without login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d423ef10-bd4e-45e1-aaf1-5d092a065caf",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/users/{{id1}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "03 User1 login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "93b7f4f0-2414-46e4-bd9e-ce75ea76d880",
						"exec": [
							"const body = JSON.parse(responseBody);",
							"",
							"pm.test(\"Login is successful\", function () {",
							"    var body = pm.response.json();",
							"    const jwt = pm.response.headers.get('Set-Cookie').split('=')[1].split(';')[0];",
							"    pm.collectionVariables.set('jwt1', jwt);",
							"",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.headers.get('Set-Cookie')).to.be.a('string')",
							"    pm.expect(body).to.have.property('firstName', pm.collectionVariables.get('firstName1'));",
							"    pm.expect(body).to.have.property('lastName', pm.collectionVariables.get('lastName1'));",
							"    pm.expect(body).to.have.property('email', pm.collectionVariables.get('email1'));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{email1}}\",\n    \"password\": \"{{password1}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/login",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "04 User1 edit",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ec49ee73-e073-4420-ae29-584a0606e0d2",
						"exec": [
							"const body = JSON.parse(responseBody);",
							"",
							"pm.test(\"Check is update successful\", function () {",
							"    var body = pm.response.json();",
							"    pm.expect(body).to.have.property('firstName', 'new_' + pm.collectionVariables.get('firstName1'));",
							"    pm.expect(body).to.have.property('lastName', pm.collectionVariables.get('lastName1'));",
							"    pm.expect(body).to.have.property('email', pm.collectionVariables.get('email1'));",
							"    pm.expect(body).to.have.property('id', pm.collectionVariables.get('id1'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"new_{{firstName1}}\",\n    \"lastName\": \"{{lastName1}}\",\n    \"email\": \"{{email1}}\",\n    \"phone\": \"{{phone1}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/users/{{id1}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "05 Get user with updated data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8fd48553-e6da-4f28-a46b-1f8ed1b61565",
						"exec": [
							"const body = JSON.parse(responseBody);",
							"",
							"pm.test(\"Check is update successful\", function () {",
							"    var body = pm.response.json();",
							"    pm.expect(body).to.have.property('firstName', 'new_' + pm.collectionVariables.get('firstName1'));",
							"    pm.expect(body).to.have.property('lastName', pm.collectionVariables.get('lastName1'));",
							"    pm.expect(body).to.have.property('email', pm.collectionVariables.get('email1'));",
							"    pm.expect(body).to.have.property('id', pm.collectionVariables.get('id1'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/users/{{id1}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "06 Logout User1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e89aea68-e3b5-41d9-96b7-d1bdc6e904f3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"should remove cookie\", function () {",
							"    const jwt = pm.response.headers.get('Set-Cookie').split('=')[1].split(';')[0];",
							"    pm.expect(jwt).to.have.lengthOf(0)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/logout",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "07 User2 register",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "192d0462-cdac-47ae-af07-6238b316380b",
						"exec": [
							"pm.collectionVariables.set(\"password2\", pm.variables.replaceIn('{{$randomPassword}}'))",
							"pm.collectionVariables.set(\"email2\", pm.variables.replaceIn('{{$randomEmail}}'))",
							"pm.collectionVariables.set(\"firstName2\", pm.variables.replaceIn('{{$randomFirstName}}_more'))",
							"pm.collectionVariables.set(\"lastName2\", pm.variables.replaceIn('{{$randomLastName}}_more'))",
							"pm.collectionVariables.set(\"phone2\", pm.variables.replaceIn('+380987864478'))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5bf3ad1c-ef4b-413a-97c2-88ae32d91368",
						"exec": [
							"const body = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"id2\", body.id);",
							"",
							"pm.test(\"Check is create successful\", function () {",
							"    const jwt = pm.response.headers.get('Set-Cookie').split('=')[1].split(';')[0];",
							"    pm.collectionVariables.set('jwt2', jwt);",
							"",
							"",
							"    var body = pm.response.json();",
							"    pm.expect(body).to.have.property('firstName', pm.collectionVariables.get('firstName2'));",
							"    pm.expect(body).to.have.property('lastName', pm.collectionVariables.get('lastName2'));",
							"    pm.expect(body).to.have.property('email', pm.collectionVariables.get('email2'));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"{{firstName2}}\",\n    \"lastName\": \"{{lastName2}}\",\n    \"email\": \"{{email2}}\",\n    \"phone\": \"{{phone2}}\",\n    \"password\": \"{{password2}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/register",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "08 User2 login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "48efec2a-337b-48bf-8736-769fe93a2b05",
						"exec": [
							"const body = JSON.parse(responseBody);",
							"",
							"pm.test(\"Login is successful\", function () {",
							"    var body = pm.response.json();",
							"    const jwt = pm.response.headers.get('Set-Cookie').split('=')[1].split(';')[0];",
							"    pm.collectionVariables.set('jwt2', jwt);",
							"",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.headers.get('Set-Cookie')).to.be.a('string')",
							"    pm.expect(body).to.have.property('firstName', pm.collectionVariables.get('firstName2'));",
							"    pm.expect(body).to.have.property('lastName', pm.collectionVariables.get('lastName2'));",
							"    pm.expect(body).to.have.property('email', pm.collectionVariables.get('email2'));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{email2}}\",\n    \"password\": \"{{password2}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/login",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "09 Get User1 by User2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "42e109cc-ade6-4b23-bc2a-ba51a3d19b52",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/users/{{id1}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "10 Update User1 by User2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5f18852a-8f9a-45d3-9ae8-e556e52f3987",
						"exec": [
							"pm.test(\"Status code is 403\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"{{firstName2}}\",\n    \"lastName\": \"{{lastName2}}\",\n    \"email\": \"{{email2}}\",\n    \"phone\": \"{{phone2}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/users/{{id1}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "11 Check billing account of User1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ad2b3e83-f022-427f-b2da-4370df5cccdf",
						"exec": [
							"pm.test(\"Check account creation\", function () {",
							"    const body = pm.response.json();",
							"    pm.expect(body.balance).to.eql(\"0.00\");",
							"    pm.expect(body.user_id).to.eql(pm.collectionVariables.get('id1'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/users/account/{{id1}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"account",
						"{{id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "12 Replenish balance User1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3db3d121-95bc-40ab-8838-5408ce466d5e",
						"exec": [
							"pm.test(\"Check is request success\", function () {",
							"    const body = pm.response.json();",
							"    pm.expect(body.ok).to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": 50\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/users/account/{{id1}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"account",
						"{{id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "13 Check billing account of User1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d34941f0-b683-4fed-958d-5cdf9bfa714b",
						"exec": [
							"pm.test(\"Should be equal 50.00\", function () {",
							"    const body = pm.response.json();",
							"    pm.expect(body.balance).to.eql(\"50.00\");",
							"    pm.expect(body.user_id).to.eql(pm.collectionVariables.get('id1'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/users/account/{{id1}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"account",
						"{{id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "14 Create order",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "232daded-9d09-475c-aec8-e4a43bcf393b",
						"exec": [
							"pm.test(\"Should create order\", function () {",
							"    const body = pm.response.json();",
							"    pm.expect(body).to.have.property('orderId');",
							"    pm.expect(body).to.have.property('status', 'pending');",
							"    pm.collectionVariables.set('orderId1', body.orderId);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b1c6f065-ef21-4ac2-b19b-54530406cc67",
						"exec": [
							"const uuid = require('uuid');",
							"",
							"pm.collectionVariables.set(\"xRequestId\", pm.variables.replaceIn(uuid.v4()))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "x-request-id",
						"value": "{{xRequestId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": 25\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/users/order/{{id1}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"order",
						"{{id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "14.1 Add order with existing XRequestId",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "955b1737-37f8-40a7-a5d9-4f901077e5d9",
						"exec": [
							"pm.test(\"Should return previous created order\", function () {",
							"    const body = pm.response.json();",
							"    pm.expect(body).to.have.property('orderId');",
							"    pm.expect(body).to.have.property('status', 'pending');",
							"    pm.expect(body.orderId).to.eql(pm.collectionVariables.get('orderId1'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "x-request-id",
						"value": "{{xRequestId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": 10\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/users/order/{{id1}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"order",
						"{{id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "15 Check billing account",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7d3f235a-90a1-4748-b931-29bd937a122d",
						"exec": [
							"pm.test(\"Should be equal 25.00\", function () {",
							"    const body = pm.response.json();",
							"    pm.expect(body.balance).to.eql(\"25.00\");",
							"    pm.expect(body.user_id).to.eql(pm.collectionVariables.get('id1'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/users/account/{{id1}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"account",
						"{{id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "16 Check notification creating",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e73daa29-3682-4727-ad0c-fe6079b8dd2d",
						"exec": [
							"pm.test(\"Check order creation notification\", function () {",
							"    const body = pm.response.json();",
							"    const billingMsg = body[0];",
							"    const orderMsg = body[1];",
							"    pm.expect(billingMsg.user_id).to.eql(pm.collectionVariables.get('id1'));",
							"    pm.expect(billingMsg.event).to.eql('billing:success')",
							"    pm.expect(billingMsg.message).to.eql(`Balance of user #${pm.collectionVariables.get('id1')} was successfully updated: 25.00`);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/notification/{{id1}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notification",
						"{{id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "17 Create too expensive order",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c82bae1c-c392-41a2-9597-2301be5ddf26",
						"exec": [
							"pm.test(\"Should create order\", function () {",
							"    const body = pm.response.json();",
							"    pm.expect(body).to.have.property('orderId');",
							"    pm.expect(body).to.have.property('status', 'pending');",
							"    pm.collectionVariables.set('orderId2', body.orderId);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f04c0427-729c-4e20-9fc2-1d2d69c13a9c",
						"exec": [
							"const uuid = require('uuid');",
							"",
							"pm.collectionVariables.set(\"xRequestId\", pm.variables.replaceIn(uuid.v4()))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "x-request-id",
						"value": "{{xRequestId}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": 55\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}/users/order/{{id1}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"order",
						"{{id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "18 Check billing acount of User1 after failing order",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4a54be7a-2ae2-4d35-9957-83f02cb12dcb",
						"exec": [
							"pm.test(\"Should be equal 25.00\", function () {",
							"    const body = pm.response.json();",
							"    pm.expect(body.balance).to.eql(\"25.00\");",
							"    pm.expect(body.user_id).to.eql(pm.collectionVariables.get('id1'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/users/account/{{id1}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"account",
						"{{id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "19 Check notification creating",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "49eba46b-37fe-4c13-8f38-368b1ed9144a",
						"exec": [
							"pm.test(\"Check failed order notification\", function () {",
							"    const body = pm.response.json();",
							"    const billingMsg = body[0];",
							"    const orderMsg = body[1];",
							"",
							"    pm.expect(orderMsg.user_id).to.eql(pm.collectionVariables.get('id1'));",
							"    pm.expect(billingMsg.user_id).to.eql(pm.collectionVariables.get('id1'));",
							"",
							"    pm.expect(billingMsg.event).to.eql('billing:failed')",
							"    pm.expect(orderMsg.event).to.eql('user:createOrder')",
							"",
							"    pm.expect(orderMsg.message).to.eql(`Order #${pm.collectionVariables.get('orderId2')} was placed.`);",
							"    pm.expect(billingMsg.message).to.eql(`Change balance of user #${pm.collectionVariables.get('id1')} was failed. Changes weren't applied.`);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}/notification/{{id1}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notification",
						"{{id1}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "1e73a107-0066-4e82-a2de-512fce8f9eb9",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "df379565-198b-4e3c-910b-2e161d8f9c75",
				"type": "text/javascript",
				"exec": [
					"tests[\"[INFO] Request: \" + (('data' in request) ? (Object.keys(request.data).length ? request.data : '{}') : '') ] = true;",
					"tests[\"[INFO] Response: \" + responseBody] = true;"
				]
			}
		}
	],
	"variable": [
		{
			"id": "88ea2d0e-4cc4-4658-b71f-778a8aec92f3",
			"key": "userId",
			"value": 40,
			"disabled": true
		},
		{
			"id": "732975d9-bf76-4ce7-b5ee-0e663ab4a62e",
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"id": "10084fec-0fed-4500-9c20-681e4be459b5",
			"key": "firstName1",
			"value": "Bessie_more"
		},
		{
			"id": "c33035e8-d9d2-4311-ae08-cf2f13133b18",
			"key": "lastName1",
			"value": "Watsica_more"
		},
		{
			"id": "d2101584-7cf0-446a-b7ec-b4ad0ce98535",
			"key": "phone1",
			"value": "+380987867878"
		},
		{
			"id": "eb949fb0-c217-40ff-85ef-3d8e7cc54eb7",
			"key": "email1",
			"value": "Otilia0@yahoo.com"
		},
		{
			"id": "d878d595-efee-4b7c-b578-dec5916bd5da",
			"key": "password1",
			"value": "swoRLNoF9d6nzlR"
		},
		{
			"id": "27aa1958-7be0-4363-a334-09a24c1cab69",
			"key": "id1",
			"value": 8
		},
		{
			"id": "d4fc713d-eeb4-473f-aae9-2e57cc552a0b",
			"key": "jwt1",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MDEyMzM0MDYsImRhdGEiOnsiaWQiOjgsImVtYWlsIjoiT3RpbGlhMEB5YWhvby5jb20ifSwiaWF0IjoxNjAxMTQ3MDA2fQ.2Lvwg__BY7NuJyRiKXXs-vVAnC-AZx4WH54QzNcElqU"
		},
		{
			"id": "0423bd7a-42b5-4187-8c64-996e42e612c5",
			"key": "firstName2",
			"value": "Nicolette_more"
		},
		{
			"id": "fc683dce-282e-4f34-b4e2-b59c14c48a76",
			"key": "lastName2",
			"value": "Stracke_more"
		},
		{
			"id": "d77de4d9-4636-4432-acf4-9bcb4de74a99",
			"key": "phone2",
			"value": "+380987864478"
		},
		{
			"id": "11c2fab6-3eb9-465b-b114-594891cf51ba",
			"key": "email2",
			"value": "Kiley.Koss39@hotmail.com"
		},
		{
			"id": "4a5b8cbb-3522-4a0a-99dd-c7daf284b2bc",
			"key": "password2",
			"value": "Fdl66ATfXqJ9K0I"
		},
		{
			"id": "68adf437-3e4e-4cde-a5f2-0120a7716981",
			"key": "id2",
			"value": 9
		},
		{
			"id": "8e7f4cb8-c3d6-40fb-ad9e-33fb6c337266",
			"key": "jwt2",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MDEyMzM0MTgsImRhdGEiOnsiaWQiOjksImVtYWlsIjoiS2lsZXkuS29zczM5QGhvdG1haWwuY29tIn0sImlhdCI6MTYwMTE0NzAxOH0.2bU3cxAGpXgX2lu107XqnelLooD3PQim_-S5jRMGxaI"
		},
		{
			"id": "fea0eb50-4a69-4ac6-b943-07ceda2da6a4",
			"key": "orderId1",
			"value": 22
		},
		{
			"id": "868dca07-35f8-4cbd-94d1-a90072b80deb",
			"key": "orderId2",
			"value": 17
		},
		{
			"id": "9a4c2278-ecbd-4c2c-a5e2-a3f8ea10775d",
			"key": "xRequestId",
			"value": "0a36697e-ae2d-4e5f-b512-2927e194f6b4"
		}
	],
	"protocolProfileBehavior": {}
}